{"version":3,"sources":["components/Nav.js","axios.js","Requests.js","components/Banner.js","components/Row.js","screens/HomeScreen.js","features/userSlice.js","firebase.js","screens/PlansScreen.js","screens/ProfileScreen.js","screens/SignupScreen.js","screens/LoginScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","screenY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","require","config","NETFLIX_API","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backdropPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","handleClick","api_key","id","trailerurl","key","console","log","map","poster_path","videoId","opts","height","width","playerVars","autoplay","HomeScreen","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","PlansScreen","products","setProducts","useSelector","collection","where","then","querySnapshot","forEach","productDoc","ref","docs","price","prices","priceId","priceData","loadCheckout","doc","uid","add","success_url","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","loadStripe","redirectToCheckout","Object","entries","productData","description","ProfileScreen","email","signOut","SignupScreen","emailRef","useRef","passwordRef","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","catch","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd0c0d89.chunk.js","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  const history = useHistory();\n\n  const transitionNavBar = () => {\n    if (window.screenY > 100) {\n      handleShow(true);\n    } else {\n      handleShow(false);\n    }\n  };\n\n  useEffect(() => {\n      window.addEventListener(\"scroll\", transitionNavBar);\n      return () => window.removeEventListener(\"scroll\", transitionNavBar)\n     \n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <div className=\"nav__contents\">\n        <img\n          onClick={() => history.push(\"/\")}\n          className=\"nav__logo\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n          alt=\"\"\n        />\n\n        <img\n          onClick={() => history.push(\"/profile\")}\n          className=\"nav__avatar\"\n          src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\n          alt=\"\"\n        />\n      </div>\n\n    </div>\n  );\n}\n\nexport default Nav;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL:\"https://api.themoviedb.org/3\"\n})\n\nexport default instance;\n","require('dotenv').config();\n\nconst NETFLIX_API = process.env.REACT_APP_NETFLIX_API_KEY;\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${NETFLIX_API}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${NETFLIX_API}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${NETFLIX_API}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${NETFLIX_API}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${NETFLIX_API}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${NETFLIX_API}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${NETFLIX_API}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${NETFLIX_API}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"../axios\";\nimport requests from \"../Requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(string, n) {\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\n        backdropPosition: \"center center\",\n      }}\n    >\n      \n      <div className=\"banner__contents\">\n        \n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List </button>\n        </div>\n\n    \n        <h1 className=\"banner__description\">{truncate(movie?.overview, 200)}</h1>\n      </div>\n      <div className=\"banner__fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;","import React, { useState, useEffect } from \"react\";\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\n\nconst baseImgUrl = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = async (movie) => {\n    const api_key = process.env.REACT_APP_TMDB_API;\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=${api_key}`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);\n    }\n  };\n  if (isLargeRow) {\n    console.log(movies)\n  }\n  \n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map(\n            (movie) => \n            (\n              (isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)\n            ) && (\n              <img\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                src={`${baseImgUrl}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n                key={movie.id}\n                onClick={() => handleClick(movie)}\n              />\n            )\n        )}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;","import React from \"react\";\nimport \"./HomeScreen.css\";\nimport Nav from \"../components/Nav\";\nimport Banner from \"../components/Banner\";\nimport Row from \"../components/Row\";\nimport requests from \"../Requests\";\n\nfunction HomeScreen () {\n    return (\n    <div className=\"homeScreen\">\n        <Nav />\n        \n        <Banner />\n\n        <Row \n          title=\"NETFLIX ORIGINALS\"\n          fetchUrl= {requests.fetchNetflixOriginals}\n          isLargeRow\n        />\n        <Row title =\"Trending Now\" fetchUrl= {requests.fetchTrending} />\n        <Row title =\"Top Rated\" fetchUrl= {requests.fetchTopRated} />\n        <Row title =\"Action Movies\" fetchUrl= {requests.fetchActionMovies} />\n        <Row title =\"Comedy Movies\" fetchUrl= {requests.fetchComedyMovies} />\n        <Row title =\"Horror Movies\" fetchUrl= {requests.fetchHorrorMovies} />\n        <Row title =\"Romance Movies\" fetchUrl= {requests.fetchRomanceMovies} />\n        <Row title =\"Documentaries\" fetchUrl= {requests.fetchDocumentaries} />\n\n    </div>\n    );\n}\n\nexport default HomeScreen;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_SB,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MS_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth };\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from \"../firebase\";\nimport \"./PlansScreen.css\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nrequire('dotenv').config();\n\nfunction PlansScreen() {\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    db.collection(\"products\")\n      .where(\"active\", \"==\", true)\n      .get()\n      .then((querySnapshot) => {\n        const products = {};\n        querySnapshot.forEach(async (productDoc) => {\n          products[productDoc.id] = productDoc.data();\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\n          priceSnap.docs.forEach((price) => {\n            products[productDoc.id].prices = {\n              priceId: price.id,\n              priceData: price.data(),\n            };\n          });\n        });\n        setProducts(products);\n      });\n  }, []);\n\n  const loadCheckout = async (priceId) => {\n    const docRef = await db\n      .collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"checkout_sessions\")\n      .add({\n          price:priceId,\n          success_url: window.location.origin,\n          cancel_url: window.location.origin,\n      });\n    docRef.onSnapshot(async (snap) => {\n        const { error, sessionId } = snap.data();\n        const STRIPE_PUBLIC_KEY = process.env.REACT_APP_STRIPE_PUBLIC_KEY;\n\n        if(error) {\n            alert(`An error occured:${error.message}`);\n        }\n        \n        if(sessionId) {\n            const stripe = await loadStripe(\n                STRIPE_PUBLIC_KEY\n            );\n            stripe.redirectToCheckout({ sessionId });\n        }\n    })\n  };\n\n  return (\n    <div className=\"plansScreen\">\n      {Object.entries(products).map(([productId, productData]) => {\n        return (\n          <div className=\"plansScreen__plan\">\n            <div className=\"plansScreen__info\">\n              <h5>{productData.name}</h5>\n              <h6>{productData.description}</h6>\n            </div>\n\n            <button onClick={() => loadCheckout(productData.prices.priceId)}>\n              Subscribe\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PlansScreen;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { auth } from \"../firebase\";\nimport Nav from \"../components/Nav\";\nimport \"./ProfileScreen.css\";\nimport PlansScreen from \"./PlansScreen\";\n\nfunction ProfileScreen() {\n  const user = useSelector(selectUser);\n\n  return (\n    <div className=\"profileScreen\">\n      <Nav />\n      <div className=\"profileScreen__body\">\n        <h1>Edit Profile</h1>\n        <div className=\"profileScreen__info\">\n          <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\" />\n          <div className=\"profileScreen__details\">\n            <h2>{user.email}</h2>\n            <div className=\"profileScreen__plans\">\n              <h3>Plans</h3>\n              <PlansScreen />\n\n              <button\n                onClick={() => auth.signOut()}\n                className=\"profileScreen__signOut\"\n              >\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileScreen;","import React, { useRef } from \"react\";\nimport { auth } from \"../firebase\";\nimport \"./SignupScreen.css\";\n\nfunction SignupScreen() {\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  const register = (e) => {\n    e.preventDefault();\n\n    auth\n        .createUserWithEmailAndPassword(\n          emailRef.current.value,\n          passwordRef.current.value\n        )\n        .then((authUser) => {\n            console.log(authUser);\n        })\n        .catch((error) => {\n            alert(error.message);\n        });\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n\n    auth\n        .signInWithEmailAndPassword(\n          emailRef.current.value,\n          passwordRef.current.value\n        )\n        .then((authUser) => {\n            console.log(authUser);\n        })\n        .catch((error) => {\n            alert(error.message);\n        });\n  };\n\n  return (\n    <div className=\"signupScreen\">\n      <form>\n        <h1>Sign In</h1>\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n        <button type=\"submit\" onClick={signIn}>\n          Sign In\n        </button>\n        <h4>\n          <span className=\"signupScreen__grey\">New to Netflix? </span>\n          <span className=\"signupScreen__link\" onClick={register}>\n            Sign Up now.\n          </span>\n        </h4>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n","import React, { useState } from \"react\";\nimport \"./LoginScreen.css\";\nimport SignupScreen from \"./SignupScreen\";\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen__background\">\n        <img\n          className=\"loginScreen__logo\"\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"Netflix Logo\"\n        />\n        <button className=\"loginScreen__button\" onClick={() => setSignIn(true)}>\n          Sign In\n        </button>\n        <div className=\"loginScreen__gradient\" />\n      </div>\n\n      <div className=\"loginScreen__body\">\n        {signIn ? (\n            <SignupScreen />\n        ) : (\n        <div>\n            <h1>Unlimited films, TV programmes and more.</h1>\n            <h2> Watch anywhere. Cancel at any time.</h2>\n            <h3>\n                Ready to watch? Enter your email to create or restart your\n                membership.\n            </h3>\n\n            <div className=\"loginScreen__input\">\n                <form>\n                <input\n                    type=\"email\"\n                    placeholder=\"Email Address\"\n                />\n                <button\n                    className=\"loginScreen__getStarted\"\n                    onClick={() => setSignIn(true)}\n                >\n                    GET STARTED\n                </button>\n                </form>\n            </div>\n        </div>\n        )}\n\n      </div>\n            \n    </div>\n  );\n}\n\nexport default LoginScreen;","import React, { useEffect} from 'react';\nimport './App.css';\nimport HomeScreen from \"./screens/HomeScreen\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport { auth } from \"./firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\n\nrequire('dotenv').config();\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email\n          })\n        );\n      } else {\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path=\"/profile\">\n              <ProfileScreen />\n            </Route>\n            <Route exact path=\"/\">\n              <HomeScreen />\n            </Route>\n          </Switch>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}